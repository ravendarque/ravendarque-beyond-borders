name: Deploy to Beta

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy (leave empty for current branch)'
        required: false
        type: string
  pull_request:
    types: [labeled]

permissions:
  contents: write
  pull-requests: write
  deployments: write

jobs:
  deploy-beta:
    # Only run on workflow_dispatch or when 'deploy-beta' label is added
    if: github.event_name == 'workflow_dispatch' || github.event.label.name == 'deploy-beta'
    runs-on: ubuntu-latest
    environment:
      name: beta
      url: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/beta/${{ steps.version.outputs.semver }}/
    steps:
      - name: Determine branch name
        id: branch-name
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            if [ -n "${{ inputs.branch }}" ]; then
              BRANCH="${{ inputs.branch }}"
            else
              BRANCH="${GITHUB_REF#refs/heads/}"
            fi
          else
            # Pull request event
            BRANCH="${{ github.head_ref }}"
          fi
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT

      - name: Checkout branch
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.branch-name.outputs.branch }}
      
      - name: Extract version from package.json
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "semver=$VERSION" >> $GITHUB_OUTPUT
          echo "Deploying version: $VERSION"

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build with beta base path
        run: pnpm run build
        env:
          # Set base path for beta deployment
          BASE_URL: /${{ github.event.repository.name }}/beta/${{ steps.version.outputs.semver }}/

      - name: Checkout gh-pages branch
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: gh-pages-repo

      - name: Deploy to beta directory
        run: |
          # Create beta directory structure if it doesn't exist
          mkdir -p gh-pages-repo/beta/${{ steps.version.outputs.semver }}
          
          # Remove old deployment (if exists)
          rm -rf gh-pages-repo/beta/${{ steps.version.outputs.semver }}/*
          
          # Copy new build
          cp -r dist/* gh-pages-repo/beta/${{ steps.version.outputs.semver }}/
          
          # Create/update index of beta deployments
          cd gh-pages-repo/beta
          cat > index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
            <title>Beta Deployments</title>
            <style>
              body { font-family: system-ui; max-width: 800px; margin: 40px auto; padding: 0 20px; }
              h1 { color: #333; }
              ul { list-style: none; padding: 0; }
              li { margin: 10px 0; padding: 15px; background: #f5f5f5; border-radius: 5px; }
              a { color: #0366d6; text-decoration: none; font-weight: 500; }
              a:hover { text-decoration: underline; }
              .version { font-family: 'Monaco', 'Courier New', monospace; }
            </style>
          </head>
          <body>
            <h1>Beta Deployments</h1>
            <p>Active beta versions available for testing:</p>
            <ul>
          EOF
          
          for dir in */; do
            if [ -d "$dir" ]; then
              version=${dir%/}
              echo "<li><a href='$version/' class='version'>v$version</a></li>" >> index.html
            fi
          done
          
          cat >> index.html << 'EOF'
            </ul>
          </body>
          </html>
          EOF

      - name: Commit and push to gh-pages
        run: |
          cd gh-pages-repo
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "Deploy beta v${{ steps.version.outputs.semver }} from ${{ steps.branch-name.outputs.branch }} ($(date -u +'%Y-%m-%d %H:%M:%S UTC'))" || echo "No changes to commit"
          git push

      - name: Comment on PR with deployment URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ steps.version.outputs.semver }}';
            const branch = '${{ steps.branch-name.outputs.branch }}';
            const url = `https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/beta/${version}/`;
            const body = `ðŸš€ **Beta Deployment Complete!**

            Version **v${version}** from branch \`${branch}\` has been deployed:

            ðŸ”— **Preview URL:** ${url}

            This beta deployment will remain available until manually removed or replaced by a new version.`;

            // Find existing deployment comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.data.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Beta Deployment Complete')
            );

            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

      - name: Deployment summary
        run: |
          echo "### âœ… Beta Deployment Successful" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** \`v${{ steps.version.outputs.semver }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** \`${{ steps.branch-name.outputs.branch }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**URL:** https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/beta/${{ steps.version.outputs.semver }}/" >> $GITHUB_STEP_SUMMARY
